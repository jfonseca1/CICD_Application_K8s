name: Python application

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip3 install --upgrade pip
        pip3 install flake8 pytest
        if [ -f requirements.txt ]; then pip3 install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  docker:
        needs: build
        runs-on: ubuntu-latest
        steps:
          -
            name: Checkout
            uses: actions/checkout@v3
          -
            name: Set up QEMU
            uses: docker/setup-qemu-action@v2
          -
            name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v2
          -
            name: Login to Docker Hub
            uses: docker/login-action@v2
            with:
              username: ${{ secrets.DOCKER_USERNAME }}
              password: ${{ secrets.DOCKER_PASSWORD }}

          - name: Build and push
            uses: docker/build-push-action@v4
            with:
              context: .
              push: true
              tags: fjacinto349/images:app-1
          - name: Run Docker Container
            id: run-container
            run: |
              # Run the container in the background and save the container ID
              container_id=$(docker run -d fjacinto349/images:app-1)
              echo "Container ID: $container_id"
              echo "::set-output name=container_id::$container_id"
    
          - name: Capture Logs from Docker Container
            run: |
              # Get the logs of the running container
              echo "Container Logs:"
              docker logs ${{ steps.run-container.outputs.container_id }}   
  modifygit:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: changing the deployment of git repo
        with:
          repository: 'jfonseca1/App-Manifest-'
          token: ${{ secrets.REPOSITORY_TOKEN }}
      - name: modify the image
        run: |
          git config user.email fjacinto349@gmail.com
          git config user.name jfonseca1
          pwd
          cat deployment.yaml
          git add .
          git commit -m 'Done  by Github Actions   Job changemanifest: ${{ github.run_number }}'
          git push origin main
        env:
          github_token: ${{ secrets.REPOSITORY_TOKEN }}
  deploy:
    needs: modifygit
    runs-on: self-hosted
    env:
      ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
      ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
      ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Check ArgoCD Status
      run: |
        kubectl get pods -A
        sleep 60
    - name: Create ArgoCD Application
      run: |
        echo "
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        metadata:
          name: python-app
          namespace: default
        spec:
          project: default
          source:
            repoURL: https://github.com/jfonseca1/App-Manifest-/
            path: ./
            targetRevision: HEAD
          destination:
            server: https://kubernetes.default.svc
            namespace: default
          syncPolicy:
            automated:
              prune: true
              selfHeal: true
        " > python-app.yaml
    - name: Apply ArgoCD Application
      run: |
        kubectl apply -f python-app.yaml 
    - name: Check ArgoCD status
      run: |
        kubectl get svc
        kubectl get pods
        kubectl logs -l app.kubernetes.io/name=argo-argocd-server 
        kubectl get pods -A
        kubectl get deployments -A
